import java.util.*;

class Solution {
    public ArrayList<String> ratInMaze(int[][] maze) {
        ArrayList<String> ans = new ArrayList<>();
        int n = maze.length;
        if (n == 0) return ans;
        if (maze[0][0] == 0 || maze[n - 1][n - 1] == 0) return ans;

        boolean[][] vis = new boolean[n][n];
        vis[0][0] = true;
        dfs(0, 0, maze, vis, new StringBuilder(), ans);

        Collections.sort(ans); 
        return ans;
    }

    private void dfs(int i, int j, int[][] maze, boolean[][] vis, StringBuilder path, ArrayList<String> ans) {
        int n = maze.length;
        if (i == n - 1 && j == n - 1) {
            ans.add(path.toString());
            return;
        }

        int[] di = {1, 0, 0, -1};
        int[] dj = {0, -1, 1, 0};
        char[] mv = {'D', 'L', 'R', 'U'};

        for (int k = 0; k < 4; k++) {
            int ni = i + di[k];
            int nj = j + dj[k];
            if (ni >= 0 && nj >= 0 && ni < n && nj < n && !vis[ni][nj] && maze[ni][nj] == 1) {
                vis[ni][nj] = true;
                path.append(mv[k]);
                dfs(ni, nj, maze, vis, path, ans);
                path.deleteCharAt(path.length() - 1);
                vis[ni][nj] = false;
            }
        }
    }
}
