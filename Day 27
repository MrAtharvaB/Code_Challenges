public class Solution {

    private static int[] buildCatalan(int n) {
        int[] cat = new int[n + 1];
        cat[0] = 1;
        for (int i = 1; i <= n; i++) {
            cat[i] = 0;
            for (int j = 0; j < i; j++) {
                cat[i] += cat[j] * cat[i - j - 1];
            }
        }
        return cat;
    }

    public ArrayList<Integer> countBSTs(int[] arr) {
        ArrayList<Integer> result = new ArrayList<>();
        int n = arr.length;
        if (n == 0) return result;

        int[] sorted = arr.clone();
        Arrays.sort(sorted);

        int[] cat = buildCatalan(n); // we need catalan values up to n

        for (int val : arr) {
            int idx = Arrays.binarySearch(sorted, val); // elements are distinct so idx >= 0
            int left = idx;
            int right = n - idx - 1;
            result.add(cat[left] * cat[right]);
        }

        return result;
    }

    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] arr1 = {2, 1, 3};
        System.out.println(sol.countBSTs(arr1)); // [1, 2, 2]
        int[] arr2 = {2, 1};
        System.out.println(sol.countBSTs(arr2)); // [1, 1]
    }
}
