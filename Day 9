class Solution {
    public ArrayList<ArrayList<Integer>> combinationSum(int n, int k) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        backtrack(result, new ArrayList<>(), n, k, 1);
        return result;
    }
    
    private void backtrack(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> tempList, int remain, int k, int start) {
        if (tempList.size() == k) {
            if (remain == 0) {
                result.add(new ArrayList<>(tempList));
            }
            return;
        }
        for (int i = start; i <= 9; i++) {
            if (i > remain) break;
            tempList.add(i);
            backtrack(result, tempList, remain - i, k, i + 1);
            tempList.remove(tempList.size() - 1);
        }
    }
}
