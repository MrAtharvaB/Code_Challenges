class Solution {

    private static final int[] dx = {-2, -1, 1, 2, 2, 1, -1, -2};
    private static final int[] dy = {1, 2, 2, 1, -1, -2, -2, -1};

    public ArrayList<ArrayList<Integer>> knightTour(int n) {
        int[][] board = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                board[i][j] = -1;
        board[0][0] = 0;
        if (solve(board, 0, 0, 1, n)) {
            ArrayList<ArrayList<Integer>> result = new ArrayList<>();
            for (int i = 0; i < n; i++) {
                ArrayList<Integer> row = new ArrayList<>();
                for (int j = 0; j < n; j++)
                    row.add(board[i][j]);
                result.add(row);
            }
            return result;
        } else {
            return new ArrayList<>();
        }
    }

    private boolean solve(int[][] board, int x, int y, int move, int n) {
        if (move == n * n) return true; 

        for (int i = 0; i < 8; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (isValid(board, nx, ny, n)) {
                board[nx][ny] = move;
                if (solve(board, nx, ny, move + 1, n))
                    return true;
                board[nx][ny] = -1; 
            }
        }
        return false;
    }
    private boolean isValid(int[][] board, int x, int y, int n) {
        return x >= 0 && y >= 0 && x < n && y < n && board[x][y] == -1;
    }
}
