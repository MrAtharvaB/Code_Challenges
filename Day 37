class Solution {
    public int shortCycle(int V, int[][] edges) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }

        int ans = Integer.MAX_VALUE;

        for (int i = 0; i < V; i++) {
            int[] dist = new int[V];
            Arrays.fill(dist, -1);
            Queue<Integer> q = new LinkedList<>();

            dist[i] = 0;
            q.add(i);

            while (!q.isEmpty()) {
                int u = q.poll();

                for (int v : adj.get(u)) {
                    if (dist[v] == -1) {
                        dist[v] = dist[u] + 1;
                        q.add(v);
                    } else if (dist[v] >= dist[u]) {
                        ans = Math.min(ans, dist[u] + dist[v] + 1);
                    }
                }
            }
        }

        return (ans == Integer.MAX_VALUE) ? -1 : ans;
    }
}
