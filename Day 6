class Solution {
    public int maxSubarrSum(int[] arr, int a, int b) {
        int n = arr.length;
        long[] prefixSum = new long[n + 1];
        
        for (int i = 0; i < n; i++) {
            prefixSum[i + 1] = prefixSum[i] + arr[i];
        }
        
        Deque<Integer> deque = new ArrayDeque<>();
        long maxSum = Long.MIN_VALUE;
        
        deque.offer(0);
        
        for (int i = a; i <= n; i++) {
            while (!deque.isEmpty() && deque.peekFirst() < i - b) {
                deque.pollFirst();
            }
            
            maxSum = Math.max(maxSum, prefixSum[i] - prefixSum[deque.peekFirst()]);
            
            if (i < n) {
                while (!deque.isEmpty() && prefixSum[deque.peekLast()] >= prefixSum[i - a + 1]) {
                    deque.pollLast();
                }
                deque.offer(i - a + 1);
            }
        }
        
        return (int) maxSum;
    }
}
